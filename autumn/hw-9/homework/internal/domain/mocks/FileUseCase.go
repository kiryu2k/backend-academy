// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "homework/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// FileUseCase is an autogenerated mock type for the FileUseCase type
type FileUseCase struct {
	mock.Mock
}

// All provides a mock function with given fields: _a0
func (_m *FileUseCase) All(_a0 context.Context) []string {
	ret := _m.Called(_a0)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *FileUseCase) Get(_a0 string) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInfo provides a mock function with given fields: _a0, _a1
func (_m *FileUseCase) GetInfo(_a0 context.Context, _a1 string) (*domain.FileInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domain.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.FileInfo, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.FileInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFileUseCase creates a new instance of FileUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileUseCase {
	mock := &FileUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
